@using BloodSuckersSlot.Web.Services
@using Shared.Models
@using Microsoft.JSInterop
@inject IPlayerSessionService PlayerSessionService
@inject IJSRuntime JS
@implements IDisposable

<div class="player-stats-compact">
    <div class="stats-header-compact">
        <h4><i class="fas fa-chart-line"></i> Player Stats</h4>
        <div class="stats-controls-compact">
            <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleView" title="@(ShowDetailed ? "Simple View" : "Detailed View")">
                <i class="fas fa-eye"></i>
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-compact">
            <i class="fas fa-spinner fa-spin"></i> Loading...
        </div>
    }
    else if (currentSession != null || playerStats != null)
    {
        <div class="stats-content-compact">
            <!-- Current Session Stats - Always visible -->
            @if (currentSession != null)
            {
                <div class="session-stats-compact">
                    <div class="session-row">
                        <div class="stat-compact">
                            <span class="stat-label-compact">Spins:</span>
                            <span class="stat-value-compact">@currentSession.TotalSpins</span>
                        </div>
                        <div class="stat-compact">
                            <span class="stat-label-compact">Bet:</span>
                            <span class="stat-value-compact">@currentSession.TotalBet.ToString("C")</span>
                        </div>
                        <div class="stat-compact">
                            <span class="stat-label-compact">Win:</span>
                            <span class="stat-value-compact">@currentSession.TotalWin.ToString("C")</span>
                        </div>
                        <div class="stat-compact">
                            <span class="stat-label-compact">RTP:</span>
                            <span class="stat-value-compact @GetRtpClass(currentSession.TotalRtp)">@(currentSession.TotalRtp.ToString("P1"))</span>
                        </div>
                        <div class="stat-compact">
                            <span class="stat-label-compact">Hit Rate:</span>
                            <span class="stat-value-compact">@(currentSession.HitRate.ToString("P1"))</span>
                        </div>
                        <div class="stat-compact">
                            <span class="stat-label-compact">Balance:</span>
                            <span class="stat-value-compact @GetBalanceClass(currentSession.CurrentBalance)">@currentSession.CurrentBalance.ToString("C")</span>
                        </div>
                    </div>
                </div>
            }

            <!-- Lifetime Stats - Only in detailed view -->
            @if (playerStats != null && ShowDetailed)
            {
                <div class="lifetime-stats-compact">
                    <div class="lifetime-row">
                        <div class="stat-compact">
                            <span class="stat-label-compact">Sessions:</span>
                            <span class="stat-value-compact">@playerStats.TotalSessions</span>
                        </div>
                        <div class="stat-compact">
                            <span class="stat-label-compact">Total Spins:</span>
                            <span class="stat-value-compact">@playerStats.TotalSpins.ToString("N0")</span>
                        </div>
                        <div class="stat-compact">
                            <span class="stat-label-compact">Max Win:</span>
                            <span class="stat-value-compact">@playerStats.MaxWinEver.ToString("C")</span>
                        </div>
                        <div class="stat-compact">
                            <span class="stat-label-compact">Free Spins:</span>
                            <span class="stat-value-compact">@playerStats.TotalFreeSpinsAwarded.ToString("N0")</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="no-stats-compact">
            <i class="fas fa-info-circle"></i>
            <span>No stats available</span>
        </div>
    }
</div>

<style>
    .player-stats-compact {
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        border-radius: 8px;
        padding: 12px 16px;
        margin: 10px 0;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.1);
        max-height: 120px;
        overflow: hidden;
    }

    .stats-header-compact {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
        padding-bottom: 8px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .stats-header-compact h4 {
        color: #fff;
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
    }

    .stats-header-compact h4 i {
        color: #4CAF50;
        margin-right: 6px;
        font-size: 0.9rem;
    }

    .stats-controls-compact {
        display: flex;
        gap: 6px;
    }

    .stats-controls-compact .btn {
        border-radius: 4px;
        font-size: 0.75rem;
        padding: 4px 8px;
        min-width: 32px;
    }

    .loading-compact {
        text-align: center;
        color: #fff;
        padding: 20px;
        font-size: 0.9rem;
    }

    .loading-compact i {
        margin-right: 6px;
        color: #4CAF50;
    }

    .stats-content-compact {
        color: #fff;
    }

    .session-stats-compact, .lifetime-stats-compact {
        margin-bottom: 8px;
    }

    .session-row, .lifetime-row {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        align-items: center;
    }

    .stat-compact {
        display: flex;
        align-items: center;
        gap: 4px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 4px;
        padding: 4px 8px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .stat-label-compact {
        font-size: 0.75rem;
        color: #b0b0b0;
        font-weight: 500;
    }

    .stat-value-compact {
        font-size: 0.85rem;
        font-weight: 600;
        color: #fff;
    }

    .stat-value-compact.rtp-good {
        color: #4CAF50;
    }

    .stat-value-compact.rtp-average {
        color: #FFC107;
    }

    .stat-value-compact.rtp-poor {
        color: #F44336;
    }

    .stat-value-compact.balance-positive {
        color: #4CAF50;
    }

    .stat-value-compact.balance-negative {
        color: #F44336;
    }

    .no-stats-compact {
        text-align: center;
        color: #b0b0b0;
        padding: 20px;
        font-size: 0.9rem;
    }

    .no-stats-compact i {
        margin-right: 6px;
        color: #666;
    }

    @@media (max-width: 768px) {
        .session-row, .lifetime-row {
            gap: 8px;
        }

        .stat-compact {
            padding: 3px 6px;
        }

        .stat-label-compact {
            font-size: 0.7rem;
        }

        .stat-value-compact {
            font-size: 0.8rem;
        }
    }
</style>

@code {
    private global::Shared.Models.PlayerSessionResponse? currentSession;
    private global::Shared.Models.PlayerStatsResponse? playerStats;
    private List<global::Shared.Models.PlayerSessionResponse> sessionHistory = new();
    private bool isLoading = true;
    private bool ShowDetailed = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStats();
    }

    private async Task LoadStats()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Load current session and player stats in parallel
            var sessionTask = PlayerSessionService.GetCurrentSessionAsync();
            var statsTask = PlayerSessionService.GetPlayerStatsAsync();

            await Task.WhenAll(sessionTask, statsTask);

            currentSession = await sessionTask;
            playerStats = await statsTask;

            await JS.InvokeVoidAsync("console.log", "Player stats loaded:", new { currentSession, playerStats });
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading player stats:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Method to update stats from spin response (called by parent component)
    public void UpdateFromSpinResponse(global::Shared.Models.PlayerSessionResponse? sessionData)
    {
        if (sessionData != null)
        {
            currentSession = sessionData;
            StateHasChanged();
        }
    }

    private void ToggleView()
    {
        ShowDetailed = !ShowDetailed;
        StateHasChanged();
    }

    private string GetRtpClass(double rtp)
    {
        if (rtp >= 0.9) return "rtp-good";
        if (rtp >= 0.7) return "rtp-average";
        return "rtp-poor";
    }

    private string GetBalanceClass(decimal balance)
    {
        return balance >= 0 ? "balance-positive" : "balance-negative";
    }

    public void Dispose()
    {
        // No timer to dispose since we removed auto-refresh
    }
}
