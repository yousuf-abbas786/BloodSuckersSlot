@page "/"
@using BloodSuckersSlot.Web.Services
@using BloodSuckersSlot.Web.Models
@inject RtpSignalRService RtpService
@inject IConfiguration Configuration
@inject IJSRuntime JS

<PageTitle>BloodSuckersSlot - Dashboard</PageTitle>

<h3>Real-Time RTP & Hit Rate Dashboard</h3>

<!-- Statistics Panel -->
<div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #dee2e6;">
    <h4 style="margin-bottom: 15px; color: #495057;">Performance Metrics</h4>
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
        <div style="background: white; padding: 10px; border-radius: 5px; border: 1px solid #e9ecef;">
            <strong style="color: #007bff;">Current RTP:</strong><br/>
            @{
                var rtpTarget = Configuration.GetValue<double>("RtpTarget", 0.88);
            }
            <span style="font-size: 18px; font-weight: bold; color: @(currentRtp >= rtpTarget ? "#28a745" : "#dc3545");">
                @(currentRtp.ToString("P2"))
            </span>
        </div>
        <div style="background: white; padding: 10px; border-radius: 5px; border: 1px solid #e9ecef;">
            <strong style="color: #28a745;">Current Hit Rate:</strong><br/>
            @{
                var hitRateTarget = Configuration.GetValue<double>("TargetHitRate", 0.35);
            }
            <span style="font-size: 18px; font-weight: bold; color: @(currentHitRate >= hitRateTarget ? "#28a745" : "#dc3545");">
                @(currentHitRate.ToString("P2"))
            </span>
        </div>
        <div style="background: white; padding: 10px; border-radius: 5px; border: 1px solid #e9ecef;">
            <strong style="color: #6f42c1;">Avg Spin Time:</strong><br/>
            <span style="font-size: 18px; font-weight: bold; color: #6f42c1;">
                @(avgSpinTime.ToString("F1"))s
            </span>
        </div>
        <div style="background: white; padding: 10px; border-radius: 5px; border: 1px solid #e9ecef;">
            <strong style="color: #fd7e14;">Total Spins:</strong><br/>
            <span style="font-size: 18px; font-weight: bold; color: #fd7e14;">
                @totalSpins
            </span>
        </div>
    </div>
    
    <h5 style="margin: 20px 0 10px 0; color: #495057;">Reel Set Selection Analysis</h5>
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
        <div style="background: white; padding: 8px; border-radius: 5px; border: 1px solid #e9ecef;">
            <strong style="color: #dc3545;">HighRtpSets:</strong><br/>
            <span style="font-size: 16px; font-weight: bold; color: #dc3545;">@highRtpCount</span>
        </div>
        <div style="background: white; padding: 8px; border-radius: 5px; border: 1px solid #e9ecef;">
            <strong style="color: #ffc107;">MidRtpSets:</strong><br/>
            <span style="font-size: 16px; font-weight: bold; color: #ffc107;">@midRtpCount</span>
        </div>
        <div style="background: white; padding: 8px; border-radius: 5px; border: 1px solid #e9ecef;">
            <strong style="color: #28a745;">LowRtpSets:</strong><br/>
            <span style="font-size: 16px; font-weight: bold; color: #28a745;">@lowRtpCount</span>
        </div>
        <div style="background: white; padding: 8px; border-radius: 5px; border: 1px solid #e9ecef;">
            <strong style="color: #6c757d;">SafeFallback:</strong><br/>
            <span style="font-size: 16px; font-weight: bold; color: #6c757d;">@safeFallbackCount</span>
        </div>
    </div>
    
    <h5 style="margin: 20px 0 10px 0; color: #495057;">Game Feature Stats</h5>
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
        <div style="background: white; padding: 8px; border-radius: 5px; border: 1px solid #e9ecef;">
            <strong style="color: #17a2b8;">Total Free Spins:</strong><br/>
            <span style="font-size: 16px; font-weight: bold; color: #17a2b8;">@totalFreeSpinsAwarded</span>
        </div>
        <div style="background: white; padding: 8px; border-radius: 5px; border: 1px solid #e9ecef;">
            <strong style="color: #e83e8c;">Total Bonuses:</strong><br/>
            <span style="font-size: 16px; font-weight: bold; color: #e83e8c;">@totalBonusesTriggered</span>
        </div>
    </div>
</div>

<div style="display: flex; gap: 20px; justify-content: center; height: 400px; overflow: hidden;">
    <div style="flex: 1; height: 100%;">
        <h4>RTP Chart</h4>
        <div style="height: 320px; width: 100%;">
            <canvas id="rtpChart" width="400" height="300"></canvas>
        </div>
    </div>
    <div style="flex: 1; height: 100%;">
        <h4>Hit Rate Chart</h4>
        <div style="height: 320px; width: 100%;">
            <canvas id="hitRateChart" width="400" height="300"></canvas>
        </div>
    </div>
</div>

@code {
    private List<string> rtpLabels = new() { "A", "B", "C", "D", "E" };
    private List<double> rtpData = new() { 0.5, 0.7, 0.6, 0.8, 0.9 };
    private List<double> rtpTargetData;
    private List<string> hitRateLabels = new() { "A", "B", "C", "D", "E" };
    private List<double> hitRateData = new() { 0.4, 0.5, 0.6, 0.55, 0.65 };
    private List<double> hitRateTargetData;
    private int spinCount = 5;
    private bool chartsInitialized = false;

    // Performance metrics
    private double currentRtp = 0.0;
    private double currentHitRate = 0.0;
    private double avgSpinTime = 0.0;
    private int totalSpins = 0;
    private int highRtpCount = 0;
    private int midRtpCount = 0;
    private int lowRtpCount = 0;
    private int safeFallbackCount = 0;
    private int totalFreeSpinsAwarded = 0;
    private int totalBonusesTriggered = 0;
    private List<double> spinTimes = new();
    private DateTime lastSpinTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        // Initialize target data from configuration
        var rtpTarget = Configuration.GetValue<double>("RtpTarget", 0.88);
        var hitRateTarget = Configuration.GetValue<double>("TargetHitRate", 0.35);
        rtpTargetData = new() { rtpTarget, rtpTarget, rtpTarget, rtpTarget, rtpTarget };
        hitRateTargetData = new() { hitRateTarget, hitRateTarget, hitRateTarget, hitRateTarget, hitRateTarget };
        
        RtpService.OnRtpUpdate += OnRtpUpdateReceived;
        await RtpService.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderCharts();
            chartsInitialized = true;
        }
    }

    private async void OnRtpUpdateReceived(RtpUpdate update)
    {
        if (update == null)
            return;

        // Debug logging to browser console
        await JS.InvokeVoidAsync("console.log", "[Web] Received RTP Update:", update);
        await JS.InvokeVoidAsync("console.log", $"[Web] Spin={update.SpinNumber}, RTP={update.ActualRtp}, HitRate={update.ActualHitRate}");
        await JS.InvokeVoidAsync("console.log", $"[Web] Performance: SpinTime={update.SpinTimeSeconds}, AvgTime={update.AverageSpinTimeSeconds}, TotalSpins={update.TotalSpins}");
        await JS.InvokeVoidAsync("console.log", $"[Web] Reel Sets: High={update.HighRtpSetCount}, Mid={update.MidRtpSetCount}, Low={update.LowRtpSetCount}, Fallback={update.SafeFallbackCount}");

        // Update metrics from backend data
        currentRtp = update.ActualRtp;
        currentHitRate = update.ActualHitRate;
        totalSpins = update.TotalSpins;
        avgSpinTime = update.AverageSpinTimeSeconds;

        // Update reel set counts from backend
        highRtpCount = update.HighRtpSetCount;
        midRtpCount = update.MidRtpSetCount;
        lowRtpCount = update.LowRtpSetCount;
        safeFallbackCount = update.SafeFallbackCount;
        
        // Update game feature stats from backend
        totalFreeSpinsAwarded = update.TotalFreeSpinsAwarded;
        totalBonusesTriggered = update.TotalBonusesTriggered;
        
        // Debug: Log the values being set
        await JS.InvokeVoidAsync("console.log", $"[Web] Setting values: RTP={currentRtp}, HitRate={currentHitRate}, TotalSpins={totalSpins}, AvgTime={avgSpinTime}");
        await JS.InvokeVoidAsync("console.log", $"[Web] Reel Sets: High={highRtpCount}, Mid={midRtpCount}, Low={lowRtpCount}, Fallback={safeFallbackCount}");

        spinCount++;
        rtpLabels.Add(update.SpinNumber.ToString());
        hitRateLabels.Add(update.SpinNumber.ToString());
        rtpData.Add(update.ActualRtp);
        rtpTargetData.Add(update.TargetRtp);
        hitRateData.Add(update.ActualHitRate);
        hitRateTargetData.Add(update.TargetHitRate);
        
        if (chartsInitialized)
            await UpdateChartsWithNewData();
            
        // Force UI refresh
        StateHasChanged();
    }

    private async Task RenderCharts()
    {
        // RTP Chart
        await JS.InvokeVoidAsync("eval", $@"
            if (window.Chart) {{
                if(window.rtpChartInstance) window.rtpChartInstance.destroy();
                var ctx = document.getElementById('rtpChart').getContext('2d');
                window.rtpChartInstance = new Chart(ctx, {{
                    type: 'line',
                    data: {{
                        labels: {ToJsArray(rtpLabels)},
                        datasets: [
                            {{
                                label: 'Actual RTP',
                                data: {ToJsArray(rtpData)},
                                borderColor: 'blue',
                                backgroundColor: 'rgba(0,0,255,0.1)',
                                fill: false
                            }},
                            {{
                                label: 'Target RTP',
                                data: {ToJsArray(rtpTargetData)},
                                borderColor: 'red',
                                backgroundColor: 'rgba(255,0,0,0.1)',
                                borderDash: [5, 5],
                                fill: false
                            }}
                        ]
                    }},
                    options: {{ 
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{
                                display: true
                            }}
                        }}
                    }}
                }});
            }}
        ");
        // Hit Rate Chart
        await JS.InvokeVoidAsync("eval", $@"
            if (window.Chart) {{
                if(window.hitRateChartInstance) window.hitRateChartInstance.destroy();
                var ctx = document.getElementById('hitRateChart').getContext('2d');
                window.hitRateChartInstance = new Chart(ctx, {{
                    type: 'line',
                    data: {{
                        labels: {ToJsArray(hitRateLabels)},
                        datasets: [
                            {{
                                label: 'Actual Hit Rate',
                                data: {ToJsArray(hitRateData)},
                                borderColor: 'green',
                                backgroundColor: 'rgba(0,255,0,0.1)',
                                fill: false
                            }},
                            {{
                                label: 'Target Hit Rate',
                                data: {ToJsArray(hitRateTargetData)},
                                borderColor: 'orange',
                                backgroundColor: 'rgba(255,165,0,0.1)',
                                borderDash: [5, 5],
                                fill: false
                            }}
                        ]
                    }},
                    options: {{ 
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{
                                display: true
                            }}
                        }}
                    }}
                }});
            }}
        ");
    }

    private async Task UpdateChartsWithNewData()
    {
        // Update RTP Chart with new data point only
        await JS.InvokeVoidAsync("eval", $@"
            if (window.rtpChartInstance) {{
                window.rtpChartInstance.data.labels.push('{rtpLabels.Last()}');
                window.rtpChartInstance.data.datasets[0].data.push({rtpData.Last()});
                window.rtpChartInstance.data.datasets[1].data.push({rtpTargetData.Last()});
                window.rtpChartInstance.update('none');
            }}
        ");
        
        // Update Hit Rate Chart with new data point only
        await JS.InvokeVoidAsync("eval", $@"
            if (window.hitRateChartInstance) {{
                window.hitRateChartInstance.data.labels.push('{hitRateLabels.Last()}');
                window.hitRateChartInstance.data.datasets[0].data.push({hitRateData.Last()});
                window.hitRateChartInstance.data.datasets[1].data.push({hitRateTargetData.Last()});
                window.hitRateChartInstance.update('none');
            }}
        ");
    }

    private string ToJsArray(IEnumerable<double> data) => "[" + string.Join(",", data) + "]";
    private string ToJsArray(IEnumerable<string> data) => "[" + string.Join(",", data.Select(x => $"'" + x + "'")) + "]";

    public void Dispose()
    {
        RtpService.OnRtpUpdate -= OnRtpUpdateReceived;
    }
}