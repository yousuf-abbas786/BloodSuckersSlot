@page "/reelsets/{Id}"
@using BloodSuckersSlot.Web.Services
@inject MongoDbService MongoDbService
@inject NavigationManager Navigation

<PageTitle>Reel Set Detail - BloodSuckersSlot</PageTitle>

<div class="container-fluid">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading reel set details...</p>
        </div>
    }
    else if (reelSet == null)
    {
        <div class="alert alert-danger">
            <h4><i class="fas fa-exclamation-triangle me-2"></i>Reel Set Not Found</h4>
            <p>The requested reel set could not be found.</p>
            <button class="btn btn-primary" @onclick="GoBack">
                <i class="fas fa-arrow-left me-2"></i>Back to Reel Sets
            </button>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="mb-2">
                    <i class="fas fa-cog me-2"></i>@reelSet.Name
                </h1>
                <div class="d-flex gap-3">
                    <span class="badge @GetTagBadgeClass(reelSet.Tag) fs-6">@reelSet.Tag</span>
                    <span class="text-muted">Created: @reelSet.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss UTC")</span>
                </div>
            </div>
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <i class="fas fa-arrow-left me-2"></i>Back to List
            </button>
        </div>

        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card @GetRtpCardClass(reelSet.ExpectedRtp)">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-percentage me-2"></i>Expected RTP
                        </h5>
                        <h2 class="card-text @GetRtpColorClass(reelSet.ExpectedRtp)">
                            @reelSet.ExpectedRtp.ToString("P2")
                        </h2>
                        <small class="text-muted">Return to Player percentage</small>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card @GetHitRateCardClass(reelSet.EstimatedHitRate)">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-bullseye me-2"></i>Estimated Hit Rate
                        </h5>
                        <h2 class="card-text @GetHitRateColorClass(reelSet.EstimatedHitRate)">
                            @reelSet.EstimatedHitRate.ToString("P2")
                        </h2>
                        <small class="text-muted">Frequency of winning combinations</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Reel Visualization -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-layer-group me-2"></i>Reel Configuration (@reelSet.Reels.Count reels)
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    @for (int i = 0; i < reelSet.Reels.Count; i++)
                    {
                        var reel = reelSet.Reels[i];
                        <div class="col-md-2 mb-3">
                            <div class="card">
                                <div class="card-header text-center py-2">
                                    <strong>Reel @(i + 1)</strong>
                                    <br />
                                    <small class="text-muted">@reel.Count.ToString() symbols</small>
                                </div>
                                <div class="card-body p-2">
                                    <div class="reel-symbols" style="max-height: 300px; overflow-y: auto;">
                                        @for (int j = 0; j < reel.Count(); j++)
                                        {
                                            var symbol = reel[j];
                                            <div class="symbol-item mb-1 p-1 border rounded @GetSymbolClass(symbol)" title="@symbol">
                                                <div class="symbol-image-container">
                                                    <img src="/images/symbols/@(symbol.ToLower()).png" 
                                                         alt="@symbol" 
                                                         class="symbol-image" 
                                                         onerror="this.style.display='none';" />
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Symbol Analysis -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-chart-pie me-2"></i>Symbol Analysis
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Symbol Distribution</h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Symbol</th>
                                        <th>Count</th>
                                        <th>Percentage</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var symbol in GetSymbolDistribution())
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <img src="/images/symbols/@(symbol.Key.ToLower()).png" 
                                                         alt="@symbol.Key" 
                                                         class="symbol-table-image me-2" 
                                                         onerror="this.style.display='none';"
                                                         title="@symbol.Key" />
                                                    <span class="badge @GetSymbolClass(symbol.Key)">@symbol.Key</span>
                                                </div>
                                            </td>
                                            <td>@symbol.Value</td>
                                            <td>@(GetSymbolPercentage(symbol.Key).ToString("P1"))</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>Reel Statistics</h6>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Total Symbols:</span>
                                <strong>@GetTotalSymbols()</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Unique Symbols:</span>
                                <strong>@GetUniqueSymbols().Count</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Average Reel Length:</span>
                                <strong>@GetAverageReelLength().ToString("F1")</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Longest Reel:</span>
                                <strong>@GetLongestReel() symbols</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Shortest Reel:</span>
                                <strong>@GetShortestReel() symbols</strong>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .reel-symbols {
        font-size: 0.8rem;
    }
    
    .symbol-item {
        background-color: #f8f9fa;
        transition: background-color 0.2s;
    }
    
    .symbol-item:hover {
        background-color: #e9ecef;
    }

    .symbol-image-container {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .symbol-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .symbol-fallback {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #f8f9fa;
        padding: 5px;
        border-radius: 5px;
        font-size: 0.75rem;
        color: #333;
        white-space: nowrap;
    }

    .symbol-table-image {
        width: 24px;
        height: 24px;
        object-fit: contain;
        border-radius: 3px;
    }
</style>

@code {
    [Parameter]
    public string Id { get; set; } = "";

    private Services.ReelSetDetail? reelSet;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadReelSet();
    }

    private async Task LoadReelSet()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            reelSet = await MongoDbService.GetReelSetDetailAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reel set: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/reelsets");
    }

    private string GetTagBadgeClass(string tag)
    {
        return tag switch
        {
            "HighRtp" => "bg-success",
            "MidRtp" => "bg-warning",
            "LowRtp" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetRtpColorClass(double rtp)
    {
        return rtp switch
        {
            >= 0.95 => "text-success",
            >= 0.90 => "text-primary",
            >= 0.85 => "text-warning",
            _ => "text-danger"
        };
    }

    private string GetRtpCardClass(double rtp)
    {
        return rtp switch
        {
            >= 0.95 => "border-success",
            >= 0.90 => "border-primary",
            >= 0.85 => "border-warning",
            _ => "border-danger"
        };
    }

    private string GetHitRateColorClass(double hitRate)
    {
        return hitRate switch
        {
            >= 0.50 => "text-success",
            >= 0.35 => "text-primary",
            >= 0.25 => "text-warning",
            _ => "text-danger"
        };
    }

    private string GetHitRateCardClass(double hitRate)
    {
        return hitRate switch
        {
            >= 0.50 => "border-success",
            >= 0.35 => "border-primary",
            >= 0.25 => "border-warning",
            _ => "border-danger"
        };
    }

    private string GetSymbolClass(string symbol)
    {
        return symbol switch
        {
            "SYM0" => "bg-warning", // Scatter
            "SYM1" => "bg-info",     // Wild
            "SYM2" => "bg-primary",  // Bonus
            "SYM3" => "bg-success",  // High value
            "SYM4" => "bg-success",
            "SYM5" => "bg-success",
            "SYM6" => "bg-secondary", // Low value
            "SYM7" => "bg-secondary",
            "SYM8" => "bg-secondary",
            _ => "bg-light"
        };
    }

    private Dictionary<string, int> GetSymbolDistribution()
    {
        if (reelSet == null) return new Dictionary<string, int>();

        var distribution = new Dictionary<string, int>();
        foreach (var reel in reelSet.Reels)
        {
            foreach (var symbol in reel)
            {
                if (distribution.ContainsKey(symbol))
                    distribution[symbol]++;
                else
                    distribution[symbol] = 1;
            }
        }

        return distribution.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
    }

    private double GetSymbolPercentage(string symbol)
    {
        if (reelSet == null) return 0;

        var totalSymbols = GetTotalSymbols();
        var symbolCount = GetSymbolDistribution().GetValueOrDefault(symbol, 0);
        return totalSymbols > 0 ? (double)symbolCount / totalSymbols : 0;
    }

    private int GetTotalSymbols()
    {
        if (reelSet == null) return 0;
        return reelSet.Reels.Sum(reel => reel.Count);
    }

    private HashSet<string> GetUniqueSymbols()
    {
        if (reelSet == null) return new HashSet<string>();
        return reelSet.Reels.SelectMany(reel => reel).ToHashSet();
    }

    private double GetAverageReelLength()
    {
        if (reelSet == null) return 0;
        return reelSet.Reels.Average(reel => reel.Count);
    }

    private int GetLongestReel()
    {
        if (reelSet == null) return 0;
        return reelSet.Reels.Max(reel => reel.Count);
    }

    private int GetShortestReel()
    {
        if (reelSet == null) return 0;
        return reelSet.Reels.Min(reel => reel.Count);
    }
} 