@page "/gamingentities"
@using BloodSuckersSlot.Web.Services
@using BloodSuckersSlot.Shared.Models
@using BloodSuckersSlot.Web.Components
@inject IGamingEntityService GamingEntityService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Gaming Entities Management</PageTitle>

<AuthGuard>

<style>
    .enterprise-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }
    
    .filter-panel {
        background: #ffffff;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.08);
    }
    
    .entity-card {
        background: #ffffff;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
    }
    
    .entity-card:hover {
        box-shadow: 0 8px 32px rgba(0,0,0,0.12);
        transform: translateY(-2px);
    }
    
    .role-badge {
        font-size: 0.75rem;
        font-weight: 600;
        padding: 0.5rem 0.75rem;
        border-radius: 8px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-block;
        min-width: 100px;
        text-align: center;
    }
    
    .action-btn {
        width: 32px;
        height: 32px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        border: 1px solid transparent;
        font-size: 0.875rem;
    }
    
    .action-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    }
    
    .action-btn i {
        font-size: 0.875rem;
        line-height: 1;
    }
    
    .expand-btn {
        width: 28px;
        height: 28px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        border: 1px solid #dee2e6;
        background: #f8f9fa;
        font-size: 0.75rem;
    }
    
    .expand-btn:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    .expand-btn i {
        font-size: 0.75rem;
        line-height: 1;
    }
    
    .filter-select {
        border: 1px solid #d1d5db;
        border-radius: 8px;
        padding: 0.75rem;
        font-size: 0.875rem;
        transition: all 0.2s ease;
    }
    
    .filter-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .stats-card {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        border-radius: 12px;
        padding: 1.5rem;
    }
    
    .detail-section {
        background: #ffffff;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    
    .detail-section-header {
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 0.75rem;
        margin-bottom: 1rem;
    }
    
    .detail-section-title {
        font-size: 0.875rem;
        font-weight: 600;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin: 0;
    }
    
    .detail-field {
        margin-bottom: 1rem;
    }
    
    .detail-field:last-child {
        margin-bottom: 0;
    }
    
    .detail-label {
        font-size: 0.75rem;
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.25rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .detail-value {
        font-size: 0.875rem;
        color: #212529;
        font-weight: 500;
    }
    
    .hierarchy-item {
        display: flex;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid #f8f9fa;
        margin-left: 0;
        transition: margin-left 0.2s ease;
    }
    
    .hierarchy-item:last-child {
        border-bottom: none;
    }
    
    .hierarchy-item.level-1 {
        margin-left: 0;
    }
    
    .hierarchy-item.level-2 {
        margin-left: 1rem;
    }
    
    .hierarchy-item.level-3 {
        margin-left: 2rem;
    }
    
    .hierarchy-item.level-4 {
        margin-left: 3rem;
    }
    
    .hierarchy-level {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: 600;
        margin-right: 0.75rem;
        flex-shrink: 0;
    }
    
    .hierarchy-info {
        flex: 1;
    }
    
    .hierarchy-name {
        font-weight: 600;
        color: #212529;
        margin-bottom: 0.125rem;
    }
    
    .hierarchy-role {
        font-size: 0.75rem;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
</style>

<div class="container-fluid px-4">
    <!-- Enterprise Header -->
    <div class="enterprise-header p-4 mb-4">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="h3 mb-2 fw-bold">
                    <i class="fas fa-sitemap me-3"></i>
                Gaming Entities Management
                </h1>
                <p class="mb-0 opacity-75">Comprehensive management system for hierarchical gaming entities</p>
            </div>
            <div class="col-md-4 text-end">
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-light btn-lg px-3" @onclick="RefreshData" title="Refresh Data">
                        <i class="fas fa-sync-alt me-2"></i>Refresh
                    </button>
                    <button class="btn btn-light btn-lg px-4" @onclick="AddNewEntity">
                        <i class="fas fa-plus me-2"></i>Add Entity
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Professional Filter Panel -->
    <div class="filter-panel p-4 mb-4">
        <div class="row align-items-end">
                        <div class="col-md-2">
                <label class="form-label fw-semibold text-muted mb-2">Super Agent</label>
                <select class="form-select filter-select" @bind="selectedSuperAgentId" @bind:after="OnSuperAgentChanged">
                    <option value="">All Super Agents</option>
                                @foreach (var superAgent in superAgents)
                                {
                                    <option value="@superAgent.Id">@superAgent.Username</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                <label class="form-label fw-semibold text-muted mb-2">Agent</label>
                <select class="form-select filter-select" @bind="selectedAgentId" @bind:after="OnAgentChanged">
                    <option value="">All Agents</option>
                                @foreach (var agent in agents)
                                {
                                    <option value="@agent.Id">@agent.Username</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                <label class="form-label fw-semibold text-muted mb-2">Token</label>
                <select class="form-select filter-select" @bind="selectedTokenId" @bind:after="OnTokenChanged">
                    <option value="">All Tokens</option>
                                @foreach (var token in tokens)
                                {
                                    <option value="@token.Id">@token.Username</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                <label class="form-label fw-semibold text-muted mb-2">Group</label>
                <select class="form-select filter-select" @bind="selectedGroupId" @bind:after="OnGroupChanged">
                    <option value="">All Groups</option>
                                @foreach (var group in groups)
                                {
                                    <option value="@group.Id">@group.Username</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                <div class="d-flex gap-2">
                    @if (HasActiveFilters())
                    {
                        <button class="btn btn-outline-danger btn-sm" @onclick="ResetFilters" title="Clear all filters">
                            <i class="fas fa-times"></i>
                        </button>
                    }
                    <button class="btn btn-primary btn-sm" @onclick="ApplyFilters">
                        <i class="fas fa-filter me-1"></i>Apply
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center">
                    <div class="me-3">
                        <i class="fas fa-users fa-2x text-primary"></i>
                    </div>
                    <div>
                        <h4 class="mb-0 fw-bold">@entities.TotalCount</h4>
                        <small class="text-muted">Total Entities</small>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center">
                    <div class="me-3">
                        <i class="fas fa-filter fa-2x text-warning"></i>
                    </div>
                    <div>
                        <h4 class="mb-0 fw-bold">@GetActiveFilterCount()</h4>
                        <small class="text-muted">Active Filters</small>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center">
                    <div class="me-3">
                        <i class="fas fa-check-circle fa-2x text-success"></i>
                    </div>
                    <div>
                        <h4 class="mb-0 fw-bold">@entities.Items.Count(e => e.Active)</h4>
                        <small class="text-muted">Active Entities</small>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center">
                    <div class="me-3">
                        <i class="fas fa-clock fa-2x text-info"></i>
                    </div>
                    <div>
                        <h4 class="mb-0 fw-bold">@entities.Items.Count(e => e.LastLoginDate.HasValue)</h4>
                        <small class="text-muted">Recently Active</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="row">
        <!-- Entity List -->
        <div class="col-md-8">
            <div class="entity-card">
                <div class="p-4 border-bottom">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 fw-bold">Entity Directory</h5>
                        @if (isLoading)
                        {
                            <div class="d-flex align-items-center text-muted">
                                <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                                </div>
                                <small>Loading entities...</small>
                            </div>
                        }
                    </div>
                </div>
                
                    @if (entities.Items.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                    <th style="width: 50px;" class="text-center">Expand</th>
                                    <th>Role</th>
                                    <th>Entity Details</th>
                                    <th>Parent</th>
                                    <th>Status</th>
                                    <th>Last Activity</th>
                                        <th style="width: 120px;" class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var hierarchicalEntity in GetHierarchicalEntities())
                                    {
                                        var entity = hierarchicalEntity.Entity;
                                        <tr class="@(selectedEntityId == entity.Id ? "table-active" : "")" 
                                            style="cursor: pointer;" 
                                            @onclick="() => SelectEntity(entity.Id)">
                                            <td class="text-center">
                                                @if (hierarchicalEntity.HasChildren)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary expand-btn" 
                                                                @onclick="() => ToggleEntity(entity.Id)" 
                                                                @onclick:stopPropagation="true"
                                                                title="@(expandedEntities.GetValueOrDefault(entity.Id, false) ? "Collapse" : "Expand")">
                                                        <i class="fas fa-chevron-@(expandedEntities.GetValueOrDefault(entity.Id, false) ? "down" : "right")"></i>
                                                        </button>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                            <span class="role-badge bg-@GetRoleColor(entity.Role)">
                                                    @entity.Role.ToString().Replace("_", " ")
                                                </span>
                                            </td>
                                            <td>
                                            <div>
                                                <div class="fw-semibold d-flex align-items-center">
                                                    @entity.Username
                                                    @if (hierarchicalEntity.HasChildren)
                                                    {
                                                        var childCount = GetChildCount(entity.Id, entity.Role);
                                                        <span class="badge bg-primary ms-2" title="@childCount children">@childCount</span>
                                                    }
                                                </div>
                                                    @if (!string.IsNullOrEmpty(entity.Email))
                                                    {
                                                    <small class="text-muted">@entity.Email</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(hierarchicalEntity.ParentName))
                                                {
                                                    <span class="text-muted">@hierarchicalEntity.ParentName</span>
                                                }
                                                else
                                                {
                                                <span class="text-muted">Root Level</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="form-check form-switch">
                                                    <input class="form-check-input" 
                                                           type="checkbox" 
                                                           checked="@entity.Active"
                                                           @onchange="() => ToggleActive(entity.Id)"
                                                           @onclick:stopPropagation="true">
                                                </div>
                                            </td>
                                            <td>
                                                @if (entity.LastLoginDate.HasValue)
                                                {
                                                <span class="text-success">@entity.LastLoginDate.Value.ToString("MMM dd, HH:mm")</span>
                                                }
                                                else
                                                {
                                                <span class="text-muted">Never</span>
                                                }
                                            </td>
                                            <td class="text-center">
                                            <div class="d-flex gap-1 justify-content-center">
                                                <button class="btn btn-outline-primary action-btn" 
                                                            @onclick="() => ViewEntity(entity.Id)"
                                                            @onclick:stopPropagation="true"
                                                        title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                    </button>
                                                <button class="btn btn-outline-secondary action-btn" 
                                                            @onclick="() => EditEntity(entity.Id)"
                                                            @onclick:stopPropagation="true"
                                                        title="Edit Entity">
                                                    <i class="fas fa-pen"></i>
                                                    </button>
                                                <button class="btn btn-outline-danger action-btn" 
                                                            @onclick="() => DeleteEntity(entity.Id)"
                                                            @onclick:stopPropagation="true"
                                                        title="Delete Entity">
                                                    <i class="fas fa-trash-alt"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No entities found</h5>
                        <p class="text-muted">Try adjusting your filters or add a new entity</p>
                        </div>
                    }
            </div>
        </div>

        <!-- Entity Details Panel -->
        <div class="col-md-4">
            @if (selectedEntity != null)
            {
                <div class="entity-card">
                    <div class="p-4 border-bottom">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0 fw-bold">Entity Details</h5>
                            <div class="d-flex gap-1">
                                <button class="btn btn-outline-primary action-btn" @onclick="EditEntity" title="Edit Entity">
                                    <i class="fas fa-pen"></i>
                            </button>
                                <button class="btn btn-outline-danger action-btn" @onclick="DeleteEntity" title="Delete Entity">
                                    <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                    </div>
                            </div>
                    <div class="p-4">
                        <!-- Basic Information Section -->
                        <div class="detail-section">
                            <div class="detail-section-header">
                                <h6 class="detail-section-title">
                                    <i class="fas fa-user me-2"></i>Basic Information
                                </h6>
                            </div>
                            <div class="detail-field">
                                <div class="detail-label">Username</div>
                                <div class="detail-value fw-bold">@selectedEntity.Username</div>
                            </div>
                            <div class="detail-field">
                                <div class="detail-label">Role</div>
                                <div class="mt-1">
                                    <span class="role-badge bg-@GetRoleColor(selectedEntity.Role)">
                                    @selectedEntity.Role.ToString().Replace("_", " ")
                                </span>
                            </div>
                        </div>
                            @if (!string.IsNullOrEmpty(selectedEntity.Email))
                            {
                                <div class="detail-field">
                                    <div class="detail-label">Email</div>
                                    <div class="detail-value">@selectedEntity.Email</div>
                            </div>
                        }
                        </div>

                        <!-- Hierarchy Section -->
                        @if (!string.IsNullOrEmpty(selectedEntity.SuperAgentId) || !string.IsNullOrEmpty(selectedEntity.AgentId) || !string.IsNullOrEmpty(selectedEntity.TokenId))
                        {
                            <div class="detail-section">
                                <div class="detail-section-header">
                                    <h6 class="detail-section-title">
                                        <i class="fas fa-sitemap me-2"></i>Hierarchy Structure
                                    </h6>
                                </div>
                                <div class="hierarchy-item level-1">
                                    <div class="hierarchy-level bg-danger text-white">1</div>
                                    <div class="hierarchy-info">
                                        <div class="hierarchy-name">@GetEntityName(selectedEntity.SuperAgentId)</div>
                                        <div class="hierarchy-role">Super Agent</div>
                                    </div>
                                </div>
                        @if (!string.IsNullOrEmpty(selectedEntity.AgentId))
                        {
                                    <div class="hierarchy-item level-2">
                                        <div class="hierarchy-level bg-warning text-white">2</div>
                                        <div class="hierarchy-info">
                                            <div class="hierarchy-name">@GetEntityName(selectedEntity.AgentId)</div>
                                            <div class="hierarchy-role">Agent</div>
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(selectedEntity.TokenId))
                        {
                                    <div class="hierarchy-item level-3">
                                        <div class="hierarchy-level bg-info text-white">3</div>
                                        <div class="hierarchy-info">
                                            <div class="hierarchy-name">@GetEntityName(selectedEntity.TokenId)</div>
                                            <div class="hierarchy-role">Token</div>
                                </div>
                            </div>
                        }
                                <div class="hierarchy-item level-@(selectedEntity.Role == EntityRole.GROUP ? "4" : "3")">
                                    <div class="hierarchy-level bg-success text-white">@(selectedEntity.Role == EntityRole.GROUP ? "4" : "3")</div>
                                    <div class="hierarchy-info">
                                        <div class="hierarchy-name">@selectedEntity.Username</div>
                                        <div class="hierarchy-role">@selectedEntity.Role.ToString().Replace("_", " ")</div>
                            </div>
                        </div>
                            </div>
                        }

                        <!-- Configuration Section -->
                        <div class="detail-section">
                            <div class="detail-section-header">
                                <h6 class="detail-section-title">
                                    <i class="fas fa-cog me-2"></i>Configuration
                                </h6>
                                    </div>
                            <div class="detail-field">
                                <div class="detail-label">Status</div>
                                <div class="d-flex align-items-center">
                                    <div class="form-check form-switch me-3">
                                        <input class="form-check-input" 
                                               type="checkbox" 
                                               checked="@selectedEntity.Active"
                                               @onchange="() => ToggleActive(selectedEntity.Id)">
                                    </div>
                                    <span class="badge bg-@(selectedEntity.Active ? "success" : "secondary")">
                                        @(selectedEntity.Active ? "Active" : "Inactive")
                                    </span>
                                </div>
                            </div>
                            
                            @if (selectedEntity.Role == EntityRole.GROUP)
                            {
                        @if (!string.IsNullOrEmpty(selectedEntity.Currency))
                        {
                                    <div class="detail-field">
                                        <div class="detail-label">Currency</div>
                                        <div class="detail-value">
                                            <span class="badge bg-primary">@selectedEntity.Currency</span>
                                </div>
                            </div>
                        }
                        @if (selectedEntity.Rtp.HasValue)
                        {
                                    <div class="detail-field">
                                        <div class="detail-label">RTP</div>
                                        <div class="detail-value">
                                            <span class="badge bg-info">@selectedEntity.Rtp%</span>
                                </div>
                            </div>
                        }
                            }
                        </div>

                        <!-- Activity Section -->
                        <div class="detail-section">
                            <div class="detail-section-header">
                                <h6 class="detail-section-title">
                                    <i class="fas fa-clock me-2"></i>Activity Information
                                </h6>
                                </div>
                            @if (selectedEntity.LastLoginDate.HasValue)
                            {
                                <div class="detail-field">
                                    <div class="detail-label">Last Login</div>
                                    <div class="detail-value text-success">
                                        <i class="fas fa-sign-in-alt me-1"></i>
                                        @selectedEntity.LastLoginDate.Value.ToString("MMM dd, yyyy HH:mm:ss")
                            </div>
                        </div>
                            }
                            else
                            {
                                <div class="detail-field">
                                    <div class="detail-label">Last Login</div>
                                    <div class="detail-value text-muted">
                                        <i class="fas fa-times-circle me-1"></i>Never
                                </div>
                            </div>
                        }
                        @if (selectedEntity.InsertDate.HasValue)
                        {
                                <div class="detail-field">
                                    <div class="detail-label">Created</div>
                                    <div class="detail-value">
                                        <i class="fas fa-calendar-plus me-1"></i>
                                        @selectedEntity.InsertDate.Value.ToString("MMM dd, yyyy HH:mm:ss")
                                </div>
                            </div>
                        }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="entity-card">
                    <div class="text-center py-5">
                        <i class="fas fa-info-circle fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">Select an Entity</h5>
                        <p class="text-muted">Choose an entity from the list to view detailed information</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Edit Entity Modal -->
@if (showEditModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Gaming Entity</h5>
                    <button type="button" class="btn-close" @onclick="() => showEditModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Username</label>
                                <input type="text" class="form-control" @bind="selectedEntity.Username" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Role (Current: @selectedEntity.Role)</label>
                                <select class="form-select" @onchange="OnRoleChanged">
                                    <option value="@EntityRole.SUPER_AGENT" selected="@(selectedEntity.Role == EntityRole.SUPER_AGENT)">SUPER AGENT</option>
                                    <option value="@EntityRole.AGENT" selected="@(selectedEntity.Role == EntityRole.AGENT)">AGENT</option>
                                    <option value="@EntityRole.TOKEN" selected="@(selectedEntity.Role == EntityRole.TOKEN)">TOKEN</option>
                                    <option value="@EntityRole.GROUP" selected="@(selectedEntity.Role == EntityRole.GROUP)">GROUP</option>
                                    <option value="@EntityRole.ADMIN" selected="@(selectedEntity.Role == EntityRole.ADMIN)">ADMIN</option>
                                    <option value="@EntityRole.PLAYER" selected="@(selectedEntity.Role == EntityRole.PLAYER)">PLAYER</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" @bind="selectedEntity.Email" />
                            </div>
                        </div>
                        @if (selectedEntity.Role == EntityRole.ADMIN || selectedEntity.Role == EntityRole.PLAYER)
                        {
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Password</label>
                                    <input type="password" class="form-control" @bind="entityPassword" placeholder="Enter password (default: player{username}123)" />
                                    <small class="form-text text-muted">Leave empty to use default password: player{username}123</small>
                                </div>
                            </div>
                        }
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Active</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="selectedEntity.Active" />
                                    <label class="form-check-label">Active</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Parent Relationship Fields -->
                    @if (selectedEntity.Role == EntityRole.AGENT || selectedEntity.Role == EntityRole.TOKEN || selectedEntity.Role == EntityRole.GROUP)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Super Agent</label>
                                    <select class="form-select" @bind="selectedEntity.SuperAgentId">
                                        <option value="">Select Super Agent</option>
                                        @foreach (var superAgent in superAgents)
                                        {
                                            <option value="@superAgent.Id">@superAgent.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    }
                    
                    @if (selectedEntity.Role == EntityRole.TOKEN || selectedEntity.Role == EntityRole.GROUP)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Agent</label>
                                    <select class="form-select" @bind="selectedEntity.AgentId">
                                        <option value="">Select Agent</option>
                                        @foreach (var agent in agents.Where(a => a.SuperAgentId == selectedEntity.SuperAgentId))
                                        {
                                            <option value="@agent.Id">@agent.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    }
                    
                    @if (selectedEntity.Role == EntityRole.GROUP)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Token</label>
                                    <select class="form-select" @bind="selectedEntity.TokenId">
                                        <option value="">Select Token</option>
                                        @foreach (var token in tokens.Where(t => t.AgentId == selectedEntity.AgentId))
                                        {
                                            <option value="@token.Id">@token.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Currency and RTP fields for GROUP entities -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Currency</label>
                                    <select class="form-select" @bind="selectedEntity.Currency">
                                        <option value="">Select Currency</option>
                                        <option value="USD">USD</option>
                                        <option value="EUR">EUR</option>
                                        <option value="GBP">GBP</option>
                                        <option value="CAD">CAD</option>
                                        <option value="AUD">AUD</option>
                                        <option value="JPY">JPY</option>
                                        <option value="CHF">CHF</option>
                                        <option value="SEK">SEK</option>
                                        <option value="NOK">NOK</option>
                                        <option value="DKK">DKK</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">RTP (%)</label>
                                    <input type="number" class="form-control" @bind="selectedEntity.Rtp" min="0" max="100" step="0.01" placeholder="e.g., 96.5" />
                                </div>
                            </div>
                        </div>
                    }
                    
                    <!-- Hierarchical selection for PLAYER entities -->
                    @if (selectedEntity.Role == EntityRole.PLAYER)
                    {
                        <!-- Super Agent Selection -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Super Agent</label>
                                    <select class="form-select" @bind="selectedEntity.SuperAgentId">
                                        <option value="">Select Super Agent</option>
                                        @foreach (var superAgent in superAgents)
                                        {
                                            <option value="@superAgent.Id">@superAgent.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Agent Selection -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Agent</label>
                                    <select class="form-select" @bind="selectedEntity.AgentId">
                                        <option value="">Select Agent</option>
                                        @foreach (var agent in agents.Where(a => a.SuperAgentId == selectedEntity.SuperAgentId))
                                        {
                                            <option value="@agent.Id">@agent.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Token Selection -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Token</label>
                                    <select class="form-select" @bind="selectedEntity.TokenId">
                                        <option value="">Select Token</option>
                                        @foreach (var token in tokens.Where(t => t.AgentId == selectedEntity.AgentId))
                                        {
                                            <option value="@token.Id">@token.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Group Selection -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Group (Available: @groups.Count)</label>
                                    <select class="form-select" @bind="selectedEntity.GroupId">
                                        <option value="">Select Group</option>
                                        @foreach (var group in groups)
                                        {
                                            <option value="@group.Id">@group.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showEditModal = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateEntity">Update Entity</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Create Entity Modal -->
@if (showCreateModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Gaming Entity</h5>
                    <button type="button" class="btn-close" @onclick="() => showCreateModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Username</label>
                                <input type="text" class="form-control" @bind="selectedEntity.Username" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Role (Current: @selectedEntity.Role)</label>
                                <select class="form-select" @onchange="OnRoleChanged">
                                    <option value="@EntityRole.SUPER_AGENT" selected="@(selectedEntity.Role == EntityRole.SUPER_AGENT)">SUPER AGENT</option>
                                    <option value="@EntityRole.AGENT" selected="@(selectedEntity.Role == EntityRole.AGENT)">AGENT</option>
                                    <option value="@EntityRole.TOKEN" selected="@(selectedEntity.Role == EntityRole.TOKEN)">TOKEN</option>
                                    <option value="@EntityRole.GROUP" selected="@(selectedEntity.Role == EntityRole.GROUP)">GROUP</option>
                                    <option value="@EntityRole.ADMIN" selected="@(selectedEntity.Role == EntityRole.ADMIN)">ADMIN</option>
                                    <option value="@EntityRole.PLAYER" selected="@(selectedEntity.Role == EntityRole.PLAYER)">PLAYER</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" @bind="selectedEntity.Email" />
                            </div>
                        </div>
                        @if (selectedEntity.Role == EntityRole.ADMIN || selectedEntity.Role == EntityRole.PLAYER)
                        {
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Password</label>
                                    <input type="password" class="form-control" @bind="entityPassword" placeholder="Enter password (default: player{username}123)" />
                                    <small class="form-text text-muted">Leave empty to use default password: player{username}123</small>
                                </div>
                            </div>
                        }
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Active</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="selectedEntity.Active" />
                                    <label class="form-check-label">Active</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Parent Relationship Fields -->
                    @if (selectedEntity.Role == EntityRole.AGENT || selectedEntity.Role == EntityRole.TOKEN || selectedEntity.Role == EntityRole.GROUP)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Super Agent</label>
                                    <select class="form-select" @bind="selectedEntity.SuperAgentId">
                                        <option value="">Select Super Agent</option>
                                        @foreach (var superAgent in superAgents)
                                        {
                                            <option value="@superAgent.Id">@superAgent.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    }
                    
                    @if (selectedEntity.Role == EntityRole.TOKEN || selectedEntity.Role == EntityRole.GROUP)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Agent</label>
                                    <select class="form-select" @bind="selectedEntity.AgentId">
                                        <option value="">Select Agent</option>
                                        @foreach (var agent in agents.Where(a => a.SuperAgentId == selectedEntity.SuperAgentId))
                                        {
                                            <option value="@agent.Id">@agent.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    }
                    
                    @if (selectedEntity.Role == EntityRole.GROUP)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Token</label>
                                    <select class="form-select" @bind="selectedEntity.TokenId">
                                        <option value="">Select Token</option>
                                        @foreach (var token in tokens.Where(t => t.AgentId == selectedEntity.AgentId))
                                        {
                                            <option value="@token.Id">@token.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Currency and RTP fields for GROUP entities -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Currency</label>
                                    <select class="form-select" @bind="selectedEntity.Currency">
                                        <option value="">Select Currency</option>
                                        <option value="USD">USD</option>
                                        <option value="EUR">EUR</option>
                                        <option value="GBP">GBP</option>
                                        <option value="CAD">CAD</option>
                                        <option value="AUD">AUD</option>
                                        <option value="JPY">JPY</option>
                                        <option value="CHF">CHF</option>
                                        <option value="SEK">SEK</option>
                                        <option value="NOK">NOK</option>
                                        <option value="DKK">DKK</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">RTP (%)</label>
                                    <input type="number" class="form-control" @bind="selectedEntity.Rtp" min="0" max="100" step="0.01" placeholder="e.g., 96.5" />
                                </div>
                            </div>
                        </div>
                    }
                    
                    <!-- Hierarchical selection for PLAYER entities -->
                    @if (selectedEntity.Role == EntityRole.PLAYER)
                    {
                        <!-- Super Agent Selection -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Super Agent</label>
                                    <select class="form-select" @bind="selectedEntity.SuperAgentId">
                                        <option value="">Select Super Agent</option>
                                        @foreach (var superAgent in superAgents)
                                        {
                                            <option value="@superAgent.Id">@superAgent.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Agent Selection -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Agent</label>
                                    <select class="form-select" @bind="selectedEntity.AgentId">
                                        <option value="">Select Agent</option>
                                        @foreach (var agent in agents.Where(a => a.SuperAgentId == selectedEntity.SuperAgentId))
                                        {
                                            <option value="@agent.Id">@agent.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Token Selection -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Token</label>
                                    <select class="form-select" @bind="selectedEntity.TokenId">
                                        <option value="">Select Token</option>
                                        @foreach (var token in tokens.Where(t => t.AgentId == selectedEntity.AgentId))
                                        {
                                            <option value="@token.Id">@token.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Group Selection -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">Group (Available: @groups.Count)</label>
                                    <select class="form-select" @bind="selectedEntity.GroupId">
                                        <option value="">Select Group</option>
                                        @foreach (var group in groups)
                                        {
                                            <option value="@group.Id">@group.Username</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showCreateModal = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateEntity">Create Entity</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private BloodSuckersSlot.Shared.Models.PaginatedResult<GamingEntityListItem> entities = new();
    private BloodSuckersSlot.Shared.Models.PaginatedResult<GamingEntityListItem> originalEntities = new(); // Store original unfiltered data
    private GamingEntityDetail? selectedEntity;
    private string? selectedEntityId;
    private string entityPassword = string.Empty;
    
    // Modal states
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private bool showDetailModal = false;

    // Collapsible state management
    private Dictionary<string, bool> expandedEntities = new();
    
    // Filter options
    private List<GamingEntityListItem> superAgents = new();
    private List<GamingEntityListItem> agents = new();
    private List<GamingEntityListItem> tokens = new();
    private List<GamingEntityListItem> groups = new();
    
    private List<string> currencies = new();
    
    // Filter values
    private string? selectedSuperAgentId;
    private string? selectedAgentId;
    private string? selectedTokenId;
    private string? selectedGroupId;
    private string? selectedCurrency;
    
    // Pagination and sorting
    private int currentPage = 1;
    private int pageSize = 50;
    private string sortField = "Role";
    private bool sortAscending = true;
    
    // UI state
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllData();
    }

    private async Task RefreshData()
    {
        Console.WriteLine("=== MANUAL REFRESH TRIGGERED ===");
        await LoadAllData();
        StateHasChanged();
    }

    private async Task LoadAllData()
    {
        isLoading = true;
        try
        {
            // Clear any existing cached data
            entities = new BloodSuckersSlot.Shared.Models.PaginatedResult<GamingEntityListItem>();
            originalEntities = new BloodSuckersSlot.Shared.Models.PaginatedResult<GamingEntityListItem>();
            
            // Load all entities in one call
            var filter = new GamingEntityFilter
            {
                PageNumber = 1,
                PageSize = 1000
            };

            var allEntitiesResult = await GamingEntityService.GetEntitiesAsync(filter);
            
            
            // Store original unfiltered data
            originalEntities = allEntitiesResult;
            
            // Set entities
            entities = allEntitiesResult;
            
            // Build filter options from the loaded data (no additional API calls needed)
            superAgents = allEntitiesResult.Items.Where(e => e.Role == EntityRole.SUPER_AGENT).ToList();
            agents = allEntitiesResult.Items.Where(e => e.Role == EntityRole.AGENT).ToList();
            tokens = allEntitiesResult.Items.Where(e => e.Role == EntityRole.TOKEN).ToList();
            
            groups = allEntitiesResult.Items.Where(e => e.Role == EntityRole.GROUP).ToList();
            
            // Note: Currency filter removed since GamingEntityListItem doesn't have Currency property
            currencies = new List<string>();
            
            // Initialize expanded state - all entities start collapsed
            expandedEntities.Clear();
            foreach (var entity in allEntitiesResult.Items)
            {
                // All entities start collapsed by default
                expandedEntities[entity.Id] = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEntities()
    {
        isLoading = true;
        try
        {
            // Use the original unfiltered data instead of making new API calls
            var filteredItems = originalEntities.Items.AsEnumerable();
            
            // Apply Super Agent filter
            if (!string.IsNullOrEmpty(selectedSuperAgentId))
            {
                filteredItems = filteredItems.Where(e => 
                    e.Id == selectedSuperAgentId || 
                    e.SuperAgentId == selectedSuperAgentId
                );
            }
            
            // Apply Agent filter - include parent super agent
            if (!string.IsNullOrEmpty(selectedAgentId))
            {
                var selectedAgent = originalEntities.Items.FirstOrDefault(e => e.Id == selectedAgentId);
                var superAgentId = selectedAgent?.SuperAgentId;
                
                filteredItems = filteredItems.Where(e => 
                    e.Id == selectedAgentId || 
                    e.AgentId == selectedAgentId ||
                    (superAgentId != null && e.Id == superAgentId)
                );
            }
            
            // Apply Token filter - include parent hierarchy
            if (!string.IsNullOrEmpty(selectedTokenId))
            {
                var selectedToken = originalEntities.Items.FirstOrDefault(e => e.Id == selectedTokenId);
                var agentId = selectedToken?.AgentId;
                var superAgentId = selectedToken?.SuperAgentId;
                
                filteredItems = filteredItems.Where(e => 
                    e.Id == selectedTokenId || 
                    e.TokenId == selectedTokenId ||
                    (agentId != null && e.Id == agentId) ||
                    (superAgentId != null && e.Id == superAgentId)
                );
            }
            
            // Apply Group filter - include full hierarchy
            if (!string.IsNullOrEmpty(selectedGroupId))
            {
                var selectedGroup = originalEntities.Items.FirstOrDefault(e => e.Id == selectedGroupId);
                var tokenId = selectedGroup?.TokenId;
                var agentId = selectedGroup?.AgentId;
                var superAgentId = selectedGroup?.SuperAgentId;
                
                filteredItems = filteredItems.Where(e => 
                    e.Id == selectedGroupId ||
                    (tokenId != null && e.Id == tokenId) ||
                    (agentId != null && e.Id == agentId) ||
                    (superAgentId != null && e.Id == superAgentId)
                );
            }

            // Create the result with filtered items
            entities = new BloodSuckersSlot.Shared.Models.PaginatedResult<GamingEntityListItem>
            {
                Items = filteredItems.ToList(),
                TotalCount = filteredItems.Count(),
                PageNumber = 1,
                PageSize = filteredItems.Count(),
                TotalPages = 1
            };
            
            // Update filter options to match current data (groups dropdown needs this)
            superAgents = originalEntities.Items.Where(e => e.Role == EntityRole.SUPER_AGENT).ToList();
            agents = originalEntities.Items.Where(e => e.Role == EntityRole.AGENT).ToList();
            tokens = originalEntities.Items.Where(e => e.Role == EntityRole.TOKEN).ToList();
            
            // Only reload groups if they're empty (prevent resetting during filtering)
            if (groups.Count == 0)
            {
                groups = originalEntities.Items.Where(e => e.Role == EntityRole.GROUP).ToList();
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading entities: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SelectEntity(string id)
    {
        selectedEntityId = id;
        selectedEntity = null; // Clear previous selection immediately
        
        try
        {
            // Force fresh data by adding cache-busting parameter
            var cacheBuster = DateTime.UtcNow.Ticks.ToString();
            selectedEntity = await GamingEntityService.GetEntityByIdAsync(id, cacheBuster);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading entity details: {ex.Message}");
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1; // Reset to first page when applying filters
        await LoadEntities();
    }

    private async Task ResetFilters()
    {
        selectedSuperAgentId = null;
        selectedAgentId = null;
        selectedTokenId = null;
        selectedGroupId = null;
        currentPage = 1;
        
        // Restore the original unfiltered data
        entities = originalEntities;
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadEntities();
    }

    private void SortBy(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }
        // Note: In a real implementation, you'd pass sort parameters to the API
    }

    private async Task ToggleActive(string id)
    {
        try
        {
            await GamingEntityService.ToggleActiveAsync(id);
            await LoadEntities();
            
            if (selectedEntity?.Id == id)
            {
                selectedEntity.Active = !selectedEntity.Active;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling active status: {ex.Message}");
        }
    }

    private async Task CreateEntity()
    {
        try
        {
            if (selectedEntity != null)
            {
                // Convert GamingEntityDetail to GamingEntity
                var entityToCreate = new GamingEntity
                {
                    Username = selectedEntity.Username,
                    Role = selectedEntity.Role,
                    Email = selectedEntity.Email,
                    Active = selectedEntity.Active,
                    SuperAgentId = selectedEntity.SuperAgentId,
                    AgentId = selectedEntity.AgentId,
                    TokenId = selectedEntity.TokenId,
                    GroupId = selectedEntity.GroupId,
                    GameProviderProfit = selectedEntity.GameProviderProfit,
                    NetworkProfitPercent = selectedEntity.NetworkProfitPercent,
                    SubsidiaryName = selectedEntity.SubsidiaryName,
                    Region = selectedEntity.Region,
                    ClientName = selectedEntity.ClientName,
                    ClientType = selectedEntity.ClientType,
                    Endpoint = selectedEntity.Endpoint,
                    PublicKey = selectedEntity.PublicKey,
                    TokenActive = selectedEntity.TokenActive,
                    ApiConfig = selectedEntity.ApiConfig,
                    Currency = selectedEntity.Currency,
                    TemplateGameLimit = selectedEntity.TemplateGameLimit,
                    Rtp = selectedEntity.Rtp,
                    GroupReference = selectedEntity.GroupReference,
                    ShopName = selectedEntity.ShopName,
                    ShopType = selectedEntity.ShopType,
                    GameLimits = selectedEntity.GameLimits,
                    TokenEndpoint = selectedEntity.TokenEndpoint,
                    TokenPublicKey = selectedEntity.TokenPublicKey,
                    PasswordHash = (selectedEntity.Role == EntityRole.ADMIN || selectedEntity.Role == EntityRole.PLAYER) ? entityPassword : null
                };

                var createdEntity = await GamingEntityService.CreateEntityAsync(entityToCreate);
                if (createdEntity != null)
                {
                    showCreateModal = false;
                    
                    // Clear both listing and detail cache
                    selectedEntity = null;
                    entities = new BloodSuckersSlot.Shared.Models.PaginatedResult<GamingEntityListItem>();
                    originalEntities = new BloodSuckersSlot.Shared.Models.PaginatedResult<GamingEntityListItem>();
                    
                    // Refresh all data
                    await LoadAllData();
                    
                    // If we created a player, auto-expand its parent group
                    if (entityToCreate.Role == EntityRole.PLAYER && !string.IsNullOrEmpty(entityToCreate.GroupId))
                    {
                        expandedEntities[entityToCreate.GroupId] = true;
                        Console.WriteLine($"Auto-expanded group {entityToCreate.GroupId} for new player");
                    }
                    else if (entityToCreate.Role == EntityRole.PLAYER && string.IsNullOrEmpty(entityToCreate.GroupId))
                    {
                        Console.WriteLine($"WARNING: Player {entityToCreate.Username} created without GroupId!");
                    }
                    
                    // Debug: Log the current entities count
                    Console.WriteLine($"Total entities loaded: {entities.Items.Count}");
                    Console.WriteLine($"Players: {entities.Items.Count(e => e.Role == EntityRole.PLAYER)}");
                    Console.WriteLine($"Groups: {entities.Items.Count(e => e.Role == EntityRole.GROUP)}");
                    
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating entity: {ex.Message}");
        }
    }

    private async Task UpdateEntity()
    {
        try
        {
            if (selectedEntity != null)
            {
                // Convert GamingEntityDetail to GamingEntity
                var entityToUpdate = new GamingEntity
                {
                    Username = selectedEntity.Username,
                    Role = selectedEntity.Role,
                    Email = selectedEntity.Email,
                    Active = selectedEntity.Active,
                    SuperAgentId = selectedEntity.SuperAgentId,
                    AgentId = selectedEntity.AgentId,
                    TokenId = selectedEntity.TokenId,
                    GroupId = selectedEntity.GroupId,
                    Currency = selectedEntity.Currency,
                    Rtp = selectedEntity.Rtp,
                    GameProviderProfit = selectedEntity.GameProviderProfit,
                    NetworkProfitPercent = selectedEntity.NetworkProfitPercent,
                    SubsidiaryName = selectedEntity.SubsidiaryName,
                    Region = selectedEntity.Region,
                    ClientName = selectedEntity.ClientName,
                    ClientType = selectedEntity.ClientType,
                    Endpoint = selectedEntity.Endpoint,
                    PublicKey = selectedEntity.PublicKey,
                    TokenActive = selectedEntity.TokenActive,
                    ApiConfig = selectedEntity.ApiConfig,
                    TemplateGameLimit = selectedEntity.TemplateGameLimit,
                    GroupReference = selectedEntity.GroupReference,
                    ShopName = selectedEntity.ShopName,
                    ShopType = selectedEntity.ShopType,
                    GameLimits = selectedEntity.GameLimits,
                    TokenEndpoint = selectedEntity.TokenEndpoint,
                    TokenPublicKey = selectedEntity.TokenPublicKey,
                    PasswordHash = (selectedEntity.Role == EntityRole.ADMIN || selectedEntity.Role == EntityRole.PLAYER) ? entityPassword : null
                };

                var updatedEntity = await GamingEntityService.UpdateEntityAsync(selectedEntity.Id, entityToUpdate);
                if (updatedEntity != null)
                {
                    showEditModal = false;
                    
                    // Clear both listing and detail cache
                    selectedEntity = null;
                    entities = new BloodSuckersSlot.Shared.Models.PaginatedResult<GamingEntityListItem>();
                    originalEntities = new BloodSuckersSlot.Shared.Models.PaginatedResult<GamingEntityListItem>();
                    
                    // Refresh all data
                    await LoadAllData();
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating entity: {ex.Message}");
        }
    }

    private void AddNewEntity()
    {
        selectedEntity = new GamingEntityDetail();
        selectedEntity.Role = EntityRole.PLAYER; // Default to PLAYER role
        selectedEntityId = null;
        entityPassword = string.Empty;
        showCreateModal = true;
    }

    private async Task OnRoleChanged(ChangeEventArgs e)
    {
        // Update the role
        if (Enum.TryParse<EntityRole>(e.Value?.ToString(), out var newRole))
        {
            selectedEntity!.Role = newRole;
        }
        
        // Clear password field when role changes
        entityPassword = string.Empty;
        
        // Clear parent relationships when role changes
        selectedEntity!.SuperAgentId = null;
        selectedEntity.AgentId = null;
        selectedEntity.TokenId = null;
        selectedEntity.GroupId = null;
        
        // Note: Filter options are already loaded, no need to reload
    }

    // Filter change event handlers
    private async Task OnSuperAgentChanged()
    {
        // Clear dependent filters when parent changes
        selectedAgentId = null;
        selectedTokenId = null;
        selectedGroupId = null;
        await ApplyFilters();
    }

    private async Task OnAgentChanged()
    {
        // Clear dependent filters when parent changes
        selectedTokenId = null;
        selectedGroupId = null;
        await ApplyFilters();
    }

    private async Task OnTokenChanged()
    {
        // Clear dependent filters when parent changes
        selectedGroupId = null;
        await ApplyFilters();
    }

    private async Task OnGroupChanged()
    {
        await ApplyFilters();
    }



    private string GetEntityName(string? entityId)
    {
        if (string.IsNullOrEmpty(entityId))
            return "Unknown";

        // Look in all entity lists to find the name
        var allEntities = superAgents.Concat(agents).Concat(tokens).Concat(groups);
        var entity = allEntities.FirstOrDefault(e => e.Id == entityId);
        return entity?.Username ?? "Unknown";
    }

    private List<HierarchicalEntity> GetHierarchicalEntities()
    {
        var allEntities = entities.Items.ToList();
        var hierarchicalList = new List<HierarchicalEntity>();

        // Debug: Log what entities we're working with
        Console.WriteLine($"=== HIERARCHICAL DISPLAY DEBUG ===");
        Console.WriteLine($"Processing {allEntities.Count} entities for hierarchical display");
        var players = allEntities.Where(e => e.Role == EntityRole.PLAYER).ToList();
        Console.WriteLine($"Players in display: {players.Count}");
        foreach (var player in players)
        {
            Console.WriteLine($"  Player: {player.Username}, GroupId: {player.GroupId}");
        }

        // First, build the hierarchy data for each entity
        var entityHierarchyData = new Dictionary<string, HierarchicalEntity>();
        
        foreach (var entity in allEntities)
        {
            var hasChildren = false;
            var level = 0;
            var parentName = "Root Level";
            var isVisible = true;
            
            // Determine hierarchy level and parent
            switch (entity.Role)
            {
                case EntityRole.ADMIN:
                    level = 0;
                    parentName = "Root Level";
                    hasChildren = false; // Admins are separate from hierarchy
                    isVisible = true; // Admins are always visible
                    break;
                    
                case EntityRole.SUPER_AGENT:
                    level = 0;
                    parentName = "Root Level";
                    hasChildren = allEntities.Any(e => e.Role == EntityRole.AGENT && !string.IsNullOrEmpty(e.SuperAgentId) && e.SuperAgentId == entity.Id);
                    isVisible = true; // Super agents are always visible
                    break;
                    
                case EntityRole.AGENT:
                    level = 1;
                    var superAgent = allEntities.FirstOrDefault(e => e.Role == EntityRole.SUPER_AGENT && e.Id == entity.SuperAgentId);
                    parentName = superAgent?.Username ?? (string.IsNullOrEmpty(entity.SuperAgentId) ? "Root Level" : "Unknown Super Agent");
                    hasChildren = allEntities.Any(e => e.Role == EntityRole.TOKEN && !string.IsNullOrEmpty(e.AgentId) && e.AgentId == entity.Id);
                    // Agent is visible if its parent super agent is expanded
                    isVisible = string.IsNullOrEmpty(entity.SuperAgentId) || 
                               expandedEntities.GetValueOrDefault(entity.SuperAgentId, false);
                    break;
                    
                case EntityRole.TOKEN:
                    level = 2;
                    var agent = allEntities.FirstOrDefault(e => e.Role == EntityRole.AGENT && e.Id == entity.AgentId);
                    parentName = agent?.Username ?? (string.IsNullOrEmpty(entity.AgentId) ? "Root Level" : "Unknown Agent");
                    hasChildren = allEntities.Any(e => e.Role == EntityRole.GROUP && !string.IsNullOrEmpty(e.TokenId) && e.TokenId == entity.Id);
                    // Token is visible if its parent agent is expanded
                    isVisible = string.IsNullOrEmpty(entity.AgentId) || 
                               expandedEntities.GetValueOrDefault(entity.AgentId, false);
                    break;
                    
                case EntityRole.GROUP:
                    level = 3;
                    var token = allEntities.FirstOrDefault(e => e.Role == EntityRole.TOKEN && e.Id == entity.TokenId);
                    parentName = token?.Username ?? (string.IsNullOrEmpty(entity.TokenId) ? "Root Level" : "Unknown Token");
                    hasChildren = allEntities.Any(e => e.Role == EntityRole.PLAYER && !string.IsNullOrEmpty(e.GroupId) && e.GroupId == entity.Id);
                    // Group is visible if its parent token is expanded
                    isVisible = string.IsNullOrEmpty(entity.TokenId) || 
                               expandedEntities.GetValueOrDefault(entity.TokenId, false);
                    
                    // Debug: Log group children detection
                    var groupPlayers = allEntities.Where(e => e.Role == EntityRole.PLAYER && e.GroupId == entity.Id).ToList();
                    Console.WriteLine($"  Group {entity.Username}: HasChildren={hasChildren}, Players={groupPlayers.Count}, Visible={isVisible}");
                    break;
                    
                case EntityRole.PLAYER:
                    level = 4;
                    var group = allEntities.FirstOrDefault(e => e.Role == EntityRole.GROUP && e.Id == entity.GroupId);
                    parentName = group?.Username ?? (string.IsNullOrEmpty(entity.GroupId) ? "Root Level" : "Unknown Group");
                    hasChildren = false; // PLAYERs are leaf nodes
                    // Player is visible if its parent group is expanded
                    // If GroupId is empty, show player at root level
                    isVisible = string.IsNullOrEmpty(entity.GroupId) || 
                               (!string.IsNullOrEmpty(entity.GroupId) && expandedEntities.GetValueOrDefault(entity.GroupId, false));
                    
                    // Debug: Log player visibility
                    var groupExpanded = string.IsNullOrEmpty(entity.GroupId) ? false : expandedEntities.GetValueOrDefault(entity.GroupId, false);
                    Console.WriteLine($"  Player {entity.Username}: GroupId={entity.GroupId}, Parent={parentName}, Visible={isVisible}, GroupExpanded={groupExpanded}");
                    break;
            }
            
            entityHierarchyData[entity.Id] = new HierarchicalEntity 
            { 
                Entity = entity, 
                Level = level,
                ParentName = parentName,
                HasChildren = hasChildren,
                IsVisible = isVisible
            };
        }

        // Now build the hierarchical order by recursively adding entities
        void AddEntityAndChildren(string entityId, List<HierarchicalEntity> result)
        {
            if (!entityHierarchyData.ContainsKey(entityId)) return;
            
            var entityData = entityHierarchyData[entityId];
            if (!entityData.IsVisible) return;
            
            // Add the entity itself
            result.Add(entityData);
            
            // If expanded, add its children
            if (entityData.HasChildren && expandedEntities.GetValueOrDefault(entityId, false))
            {
                var children = allEntities.Where(e => 
                    (e.Role == EntityRole.AGENT && e.SuperAgentId == entityId) ||
                    (e.Role == EntityRole.TOKEN && e.AgentId == entityId) ||
                    (e.Role == EntityRole.GROUP && e.TokenId == entityId) ||
                    (e.Role == EntityRole.PLAYER && e.GroupId == entityId)
                ).OrderBy(e => e.Username);
                
                foreach (var child in children)
                {
                    AddEntityAndChildren(child.Id, result);
                }
            }
        }

        // Start with root level entities (SUPER_AGENT and ADMIN)
        var rootEntities = allEntities.Where(e => 
            e.Role == EntityRole.SUPER_AGENT || e.Role == EntityRole.ADMIN
        ).OrderBy(e => e.Username);
        
        foreach (var rootEntity in rootEntities)
        {
            AddEntityAndChildren(rootEntity.Id, hierarchicalList);
        }

        return hierarchicalList;
    }

    public class HierarchicalEntity
    {
        public GamingEntityListItem Entity { get; set; } = new();
        public int Level { get; set; }
        public string? ParentName { get; set; }
        public bool HasChildren { get; set; }
        public bool IsVisible { get; set; }
    }

    private void ToggleEntity(string entityId)
    {
        if (expandedEntities.ContainsKey(entityId))
        {
            expandedEntities[entityId] = !expandedEntities[entityId];
        }
        else
        {
            expandedEntities[entityId] = false; // Start collapsed
        }
        StateHasChanged(); // Trigger UI refresh
    }

    private async Task EditEntity(string id)
    {
        try
        {
            // Load the entity details for editing
            selectedEntity = await GamingEntityService.GetEntityByIdAsync(id);
            if (selectedEntity != null)
            {
                selectedEntityId = id;
                entityPassword = string.Empty;
                showEditModal = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading entity for edit: {ex.Message}");
        }
    }

    private async Task DeleteEntity(string id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this entity?"))
        {
            try
            {
                var success = await GamingEntityService.DeleteEntityAsync(id);
                if (success)
                {
                    await LoadEntities(); // Refresh the list
                    selectedEntity = null;
                    selectedEntityId = null;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting entity: {ex.Message}");
            }
        }
    }

    private void ViewEntity(string id)
    {
        Navigation.NavigateTo($"/gaming-entities/{id}");
    }

    private async Task EditEntity()
    {
        if (selectedEntity != null)
        {
            try
            {
                // Load the full entity details for editing
                var entityDetails = await GamingEntityService.GetEntityByIdAsync(selectedEntity.Id);
                if (entityDetails != null)
                {
                    selectedEntity = entityDetails;
                    entityPassword = string.Empty;
                    showEditModal = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading entity for edit: {ex.Message}");
            }
        }
    }

    private async Task DeleteEntity()
    {
        if (selectedEntity != null)
        {
            // Add confirmation dialog in real implementation
            await GamingEntityService.DeleteEntityAsync(selectedEntity.Id);
            await LoadEntities();
            selectedEntity = null;
            selectedEntityId = null;
        }
    }

    private string GetRoleColor(EntityRole role)
    {
        return role switch
        {
            EntityRole.SUPER_AGENT => "danger",
            EntityRole.AGENT => "warning",
            EntityRole.TOKEN => "info",
            EntityRole.GROUP => "success",
            _ => "secondary"
        };
    }

    // Filter status helper methods
    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(selectedSuperAgentId) ||
               !string.IsNullOrEmpty(selectedAgentId) ||
               !string.IsNullOrEmpty(selectedTokenId) ||
               !string.IsNullOrEmpty(selectedGroupId);
    }

    private int GetActiveFilterCount()
    {
        int count = 0;
        if (!string.IsNullOrEmpty(selectedSuperAgentId)) count++;
        if (!string.IsNullOrEmpty(selectedAgentId)) count++;
        if (!string.IsNullOrEmpty(selectedTokenId)) count++;
        if (!string.IsNullOrEmpty(selectedGroupId)) count++;
        return count;
    }

    private int GetChildCount(string entityId, EntityRole role)
    {
        var allEntities = entities.Items.ToList();
        
        return role switch
        {
            EntityRole.SUPER_AGENT => allEntities.Count(e => e.Role == EntityRole.AGENT && e.SuperAgentId == entityId),
            EntityRole.AGENT => allEntities.Count(e => e.Role == EntityRole.TOKEN && e.AgentId == entityId),
            EntityRole.TOKEN => allEntities.Count(e => e.Role == EntityRole.GROUP && e.TokenId == entityId),
            EntityRole.GROUP => allEntities.Count(e => e.Role == EntityRole.PLAYER && e.GroupId == entityId),
            _ => 0
        };
    }
}

</AuthGuard>
